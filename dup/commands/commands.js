// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice;

  commands.cat = function() {
    var arg, args, file, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      file = env.currentDirectory.getFileWithPath(arg);
      if (file == null) {
        stdout.writeln("cat: " + arg + ": No such file or directory");
        return;
      }
      if (file instanceof Directory) {
        stdout.writeln("cat: " + arg + ": Is a directory");
        return;
      }
      if (file.contents != null) {
        stdout.write(file.contents);
      }
    }
  };

  commands.cd = function(arg) {
    var directory;
    if ((arg != null ? arg.substr(0, 1) : void 0) === fs.separator) {
      stdout.writeln("cd: Absolute addressing disabled due to exigent circumstances.");
      return;
    }
    directory = arg != null ? env.currentDirectory.getDirectoryWithPath(arg) : env.homeDirectory;
    if (directory) {
      env.currentDirectory = directory;
      return stdout.writeln(env.currentDirectory.path());
    } else {
      return stdout.writeln("cd: " + arg + ": No such file or directory");
    }
  };

  commands.civstat = function() {};

  commands.clear = function() {
    return terminal.clear();
  };

  commands.debug = function() {
    debugger;
  };

  commands.echo = function() {
    var args, message;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    message = args.join(" ");
    return stdout.writeln(message);
  };

  commands.help = function() {
    return stdout.writeln(commands.help.message);
  };

  commands.help.message = "\nAvailable commands:\n\ncat [filename]      Display the contents of file(s)\ncd [directoryname]  Change directory. Enter \"cd ..\" to go up one level.\nclear               Clear the terminal console\necho [arguments]    Echo arguments\nhelp                Display this message\nlogout              Log out\nls                  List directory contents\npwd                 Display the name of the current directory\nwhoami              show the name of the current user\n";

  commands.ls = function(arg) {
    var child, file, fileNames, output;
    if (arg != null) {
      file = env.currentDirectory.getFileWithPath(arg);
      if (file == null) {
        stdout.writeln("ls: " + arg + ": No such file or directory");
        return;
      }
    } else {
      file = env.currentDirectory;
    }
    if (file instanceof Directory) {
      fileNames = (function() {
        var _i, _len, _ref, _results;
        _ref = file.contents;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          _results.push(child.name);
        }
        return _results;
      })();
      fileNames.sort();
      output = columns.format(fileNames);
      if (output.length > 0) {
        return stdout.writeln(output);
      }
    } else {
      return stdout.writeln(file.name);
    }
  };

  commands.open = function() {
    var arg, args, file, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      file = env.currentDirectory.getFileWithPath(arg);
      if (file == null) {
        stdout.writeln("open: " + arg + ": No such file or directory");
        return;
      }
      if (file instanceof Directory) {
        stdout.writeln("open: " + arg + ": Is a directory");
        return;
      }
      if (file.contents != null) {
        window.open(file.contents);
      }
    }
  };

  commands.pwd = function() {
    return stdout.writeln(env.currentDirectory.path());
  };

  commands.sh = function() {
    if (!env.currentDirectory) {
      env.currentDirectory = "/";
    }
    env.prompt = "$ ";
    window.stdout = terminal;
    return terminal.readln(function(s) {
      var args, command, commandFn, existingFile, outputFile, redirect, _ref;
      switch (s) {
        case "":
          break;
        case "exit":
        case "logout":
          logout();
          return;
        default:
          _ref = commands.sh.parse(s), command = _ref.command, args = _ref.args, redirect = _ref.redirect;
          commandFn = commands[command];
          if (commandFn != null) {
            if (redirect != null) {
              existingFile = env.currentDirectory.getFileWithName(redirect);
              if (existingFile != null) {
                outputFile = existingFile;
              } else {
                outputFile = new TextFile(redirect, env.currentDirectory);
                env.currentDirectory.contents.push(outputFile);
              }
              window.stdout = outputFile;
            }
            commandFn.apply(null, args);
          } else {
            stdout.writeln("" + commandName + ": command not found");
          }
      }
      return commands.sh();
    });
  };

  commands.sh.parse = function(s) {
    var args, command, main, parts, redirect, _ref;
    parts = s.split(">");
    main = parts[0];
    redirect = (_ref = parts[1]) != null ? _ref.trim() : void 0;
    args = main.split(" ");
    command = args.shift();
    return {
      command: command,
      args: args,
      redirect: redirect
    };
  };

  commands.sum = function() {
    var arg, args, file, result, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (args.length === 0) {
      stdout.writeln("usage: sum [files...]");
      return;
    }
    result = 0;
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      file = env.currentDirectory.getFileWithPath(arg);
      if (file == null) {
        stdout.writeln("sum: " + arg + ": No such file or directory");
        return;
      }
      result += commands.sum.sumFile(file);
    }
    return stdout.writeln(result);
  };

  commands.sum.sumDirectory = function(directory) {
    var file, result, _i, _len, _ref;
    result = 0;
    _ref = directory.contents;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      result += commands.sum.sumFile(file);
    }
    return result;
  };

  commands.sum.sumFile = function(file) {
    if (file instanceof Directory) {
      return commands.sum.sumDirectory(file);
    } else if (file instanceof TextFile) {
      return commands.sum.sumString(file.contents);
    } else {
      return 0;
    }
  };

  commands.sum.sumString = function(string) {
    return string.length;
  };

  commands.whoami = function() {
    return stdout.writeln(env.userName);
  };

  commands.xyzzy = function() {
    return stdout.writeln("Nothing happens");
  };

}).call(this);
